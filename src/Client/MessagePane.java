
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import swing_gui.*;
import apendix.ConnectionClassLite;
import apendix.ConnectionClass;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import File_Transfer.*;

/**
 *
 * @author amanpal
 */
public class MessagePane extends javax.swing.JFrame implements MessageListener, FileReceivedListener{

    private ConnectionClass dbObject;
    private ConnectionClassLite dbObjectLite;
    
    public String FileName = null;
    private final String login; // opposite person
    private final ChatClient client;
    private final LoginWindow lWindow;
    private final String user; // user name
    private String uID, rID;
    private int setMsgStatus = 0;
    private JScrollBar jScrollBar;
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private JList<String> messageList = new JList<>(listModel);
    private JFileChooser jfc;
    
    /**
     * Creates new form MessagePane
     * @param client
     * @param login
     */
    public MessagePane(ChatClient client, String login, String user, LoginWindow lWindow, UserListPane2 userPanel) {
        
        super(user);
        this.user = user;
        this.client = client;
        this.login = login;
        this.lWindow = lWindow;
        
        client.addMessageListener(this);
        client.addFileReceivedListener(this);
        
        messageList.setFont(new java.awt.Font("Segoe UI Semibold", 0, 26));
        messageList.setForeground(Color.red);
        initComponents();
        jLabel1.setText("Message: "+login);
        
        //scrollbar properties
        jScrollBar = jScrollPane1.getVerticalScrollBar();
        //jScrollBar.setAutoscrolls(true);
        
        //hmmmm
        
        // disconnect before exit
        this.addWindowListener(new WindowEventHandler(client, "disconnect"));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
        
        getIDs();
        //history
        loadMsgHistory();
        readOfflinedMsg();
    }
    
    public MessagePane() {
        
        this.client = null;
        this.login = "aman";
        this.user = "guest";
        this.lWindow = null;
        //this.client = client;
        //this.login = login;
        
        //client.addMessageListener(this);
        messageList.setFont(new java.awt.Font("Segoe UI Semibold", 0, 22));
        messageList.setForeground(Color.red);
        initComponents();
        jTextField1.setFocusable(true);
        
        //scrollbar properties
        jScrollBar = jScrollPane1.getVerticalScrollBar();
        jScrollBar.setAutoscrolls(true);
        
        //jScrollBar.setValue(jScrollBar.getMaximum());
        jScrollBar.addAdjustmentListener(new AdjustmentListener() {

            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
            SwingUtilities.invokeLater(new Runnable()
            {
                @Override
                public void run()
                {
                    if(jScrollBar.getUnitIncrement() > 0 && setMsgStatus == 1)
                    {
                        jScrollBar.setValue(jScrollBar.getMaximum());
                        setMsgStatus = 0;
                    }
                    else //if(setScrollStatus == 0)
                    {
                        //jScrollBar.setValue(jScrollBar.getMaximum());
                    }
                }   
            });
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelchat = new JDesktopPane(){
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 26)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 255, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Chatting To");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jLabel2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel2KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(630, 567));

        panelchat.setBackground(new java.awt.Color(255, 255, 255));
        panelchat.setAlignmentX(0.0F);
        panelchat.setMinimumSize(new java.awt.Dimension(607, 565));
        panelchat.setLayout(new javax.swing.BoxLayout(panelchat, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(panelchat);

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setText("Message Here");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon("D:\\Java_project\\images\\send.png")); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon("D:\\Java_project\\images\\doc.png")); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jLabel4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel4KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void getIDs()
    {
        try {
            dbObject = ConnectionClass.getConnObj();
            PreparedStatement pSt = dbObject.conn.prepareStatement("select * from user where `username` = ? OR `username` = ?");
            pSt.setString(1, this.user);        pSt.setString(2, this.login);
            ResultSet rs = pSt.executeQuery();
            if(rs.next())
            {
                //settin something
                
                if(rs.getString("username").equalsIgnoreCase(this.user))
                {
                    uID = rs.getString("id");
                    rs.next();
                    rID = rs.getString("id");
                }
                else
                {
                    rID = rs.getString("id");
                    rs.next();
                    uID = rs.getString("id");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MessagePane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void loadMsgHistory()
    {
        try 
        {
             //getConnection to database
            dbObjectLite = ConnectionClassLite.getConnObj(user);
            
            PreparedStatement pSt = dbObjectLite.conn.prepareStatement("select * from messages where (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?)");
                pSt.setString(1, uID);   pSt.setString(2, rID);
                pSt.setString(3, rID);   pSt.setString(4, uID);
                ResultSet rs2 = pSt.executeQuery();
                while(rs2.next())
                {
                    String text = rs2.getString("message_body");
                    if(rs2.getString("sender_id").equalsIgnoreCase(uID))
                    {
                        if(text.split(" ")[0].equalsIgnoreCase("###") && text.split(" ")[1].contains("."))
                        {
                            FileSend box = new FileSend();
                            box.setName(text.split(" ")[1]);
                            panelchat.add(box);
                            continue;
                        }
                        UserBlock box = new UserBlock();
                        box.setMessage(text);
                        panelchat.add(box);
                        //listModel.addElement("You: "+text);
                        
                    }
                    else
                    {
                        if(text.split(" ")[0].equalsIgnoreCase("###") && text.split(" ")[1].contains("."))
                        {
                            FileReceive box = new FileReceive();
                            box.setName(login, text.split(" ")[1]);
                            panelchat.add(box);
                            continue;
                        }
                        String line = this.login+": "+text;
                        FriendBlock box = new FriendBlock();
                        box.setMessage(login, text);
                        panelchat.add(box);
                        //listModel.addElement(line);
                    }
                }
            } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error Loading Previous Messages");
            ex.printStackTrace();
        }
        refresh(panelchat);
        scrollToBottom(jScrollPane1);
    }
    
    private void readOfflinedMsg()
    {
        try
        {
            java.util.Date now = new java.util.Date();
            SimpleDateFormat fnow = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date = fnow.format(now);
            PreparedStatement pSt2 = dbObject.conn.prepareStatement("select * from haltmsg where sender_id = ? AND receiver_id = ?");
            pSt2.setString(1, rID);
            pSt2.setString(2, uID);
            ResultSet done = pSt2.executeQuery();
            while(done.next())
            {
                FriendBlock box = new FriendBlock();
                box.setMessage(login, done.getString("message_body"));
                panelchat.add(box);
                storeMsg("friend", done.getString("message_body"));
                PreparedStatement pSt = dbObject.conn.prepareStatement("DELETE FROM haltmsg WHERE id=?");
                pSt.setString(1, done.getString("id"));
                pSt.executeUpdate();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        refresh(panelchat);
        scrollToBottom(jScrollPane1);
    }
    
    private boolean storeMsg(String from, String msgBody)
    {
        String rid2 = rID;
        try 
        {
            dbObject = ConnectionClass.getConnObj();
            PreparedStatement pSt = dbObject.conn.prepareStatement("select * from user where `username` = ?");
            pSt.setString(1, from);
            ResultSet rs = pSt.executeQuery();
            if (rs.next()) 
            {
                rid2 = rs.getString("id");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
         try 
        {
            //getConnection to database
            dbObjectLite = ConnectionClassLite.getConnObj(user);
            //date
            java.util.Date now = new java.util.Date();
            SimpleDateFormat fnow = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date = fnow.format(now);
            
            if(true)
            {
                String text = jTextField1.getText();
                
                // database query
                    PreparedStatement pSt2 = dbObjectLite.conn.prepareStatement("insert into messages(`sender_id`, `receiver_id`, `message_body`, `create_date`) values(?, ?, ?, ?)");
                    if(from.equalsIgnoreCase("me"))
                    {
                        pSt2.setString(1, uID); pSt2.setString(2, rid2);
                        if(msgBody.split(" ")[0].equalsIgnoreCase("###") && msgBody.split(" ")[1].contains("."))
                        {
                            text = msgBody;
                        }
                    }
                    else
                    {
                        text = msgBody;
                        pSt2.setString(1, rid2); pSt2.setString(2, uID);
                    }
                    pSt2.setString(3, text);    pSt2.setString(4, date);
                    
                    int done = pSt2.executeUpdate();
                    if(done == 1) // 2nd level query
                    {
                       return true; 
                    }
                    else
                    {
                        //JOptionPane.showMessageDialog(null, "Error Storing Message");
                    }
                    
                }
                else
                {
                    //JOptionPane.showMessageDialog(null, "Error Storing Message");
                }
            } catch (SQLException ex) {
            Logger.getLogger(MessagePane.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    private void sendMsg()
    {
        try
        {
            dbObject = ConnectionClass.getConnObj();
            PreparedStatement pSt = dbObject.conn.prepareStatement("select * from user where username = ? AND is_active = ?");
            pSt.setString(1, login);
            pSt.setString(2, "0");
            ResultSet set = pSt.executeQuery();
            if(set.next() && !jTextField1.getText().trim().equalsIgnoreCase(""))
            {
                java.util.Date now = new java.util.Date();
                SimpleDateFormat fnow = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String date = fnow.format(now);
                PreparedStatement pSt2 = dbObject.conn.prepareStatement("insert into haltmsg(`sender_id`, `receiver_id`, `message_body`, `create_date`) values(?, ?, ?, ?)");
                pSt2.setString(1, uID); pSt2.setString(2, rID);
                pSt2.setString(3, jTextField1.getText());    pSt2.setString(4, date);
                int done = pSt2.executeUpdate();
                if(done == 1)
                {
                    System.out.println("sent offline message!");
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Error Sending Message(Server Problem)!");
                    return;
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        try {
            String text = jTextField1.getText();
            client.msg(login, text);
            //
            UserBlock box = new UserBlock();
            box.setMessage(text);
            panelchat.add(box);
            //listModel.addElement("You: "+text);
            setMsgStatus = 1;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        if(!jTextField1.getText().trim().equalsIgnoreCase(""))
        {
            if(storeMsg("me", ""))
            {
                jTextField1.setText("");
                System.out.println("Msg Stored.");
            }
            else
            {
                System.out.println("Msg not Stored.");
            }
        }
        refresh(panelchat);
        scrollToBottom(jScrollPane1);
    }
    
    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        if(KeyEvent.VK_ENTER == evt.getKeyCode())
        {
            sendMsg();
            jTextField1.grabFocus();
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        sendMsg();
        jTextField1.grabFocus();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel2KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
            goBack();
    }//GEN-LAST:event_jLabel2KeyPressed

    private void sendFile()
    {
        Sender temp = new Sender(this, client, login); // do it fast
        temp.setLocation(this.getX()+10, this.getY()+2);
        temp.setVisible(true);
    }
    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        sendFile();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel4KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
        {
            sendFile();
        }
    }//GEN-LAST:event_jLabel4KeyPressed

    private void goBack()
    {
        this.dispose();
        UserListPane2 userPanel = new UserListPane2(lWindow, client);
        client.addMessageListener(userPanel);
        userPanel.setVisible(true);
        //new UserListPane2(this.lWindow, this.client).setVisible(true);
    }
    private void refresh(Component obj) {
        obj.revalidate();
        obj.repaint();
    }
    
    private void scrollToBottom(JScrollPane scrollPane) {
        JScrollBar verticalBar = scrollPane.getVerticalScrollBar();
        AdjustmentListener downScroller = new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                Adjustable adjustable = e.getAdjustable();
                adjustable.setValue(adjustable.getMaximum());
                verticalBar.removeAdjustmentListener(this);
            }
        };
        verticalBar.addAdjustmentListener(downScroller);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MessagePane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MessagePane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MessagePane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MessagePane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MessagePane().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JDesktopPane panelchat;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onMessage(String fromLogin, String msgBody) {
        if(fromLogin.equalsIgnoreCase(login))
        {
            String line = fromLogin+": "+msgBody;
            //
           FriendBlock box = new FriendBlock();
           box.setMessage(login, msgBody);
           panelchat.add(box);
        }
        //listModel.addElement(line);
        if(storeMsg(fromLogin, msgBody))
        {
            System.out.println("Message Stored");
        }
        else
        {
            System.err.println("Message not stored");
        }
        setMsgStatus = 1; 
        refresh(panelchat);
        scrollToBottom(jScrollPane1);
    }
    
    public void sent()
    {
        try {
            client.sentFile(login, FileName);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        FileSend box = new FileSend();
        box.setName(FileName);
        panelchat.add(box);
        this.storeMsg("me", "### "+FileName);
    }

    @Override
    public void receivedFile(String fromLogin, String FileName) {
        System.out.println("Inside receivedFile");
        String line = "### "+FileName;
        if(fromLogin.equalsIgnoreCase(login))
        {
            System.out.println("inside refile if");
            //
            FileReceive box = new FileReceive();
            box.setName(login, FileName);
            panelchat.add(box);
        }
        //listModel.addElement(line);
        if(storeMsg(fromLogin, line))
        {
           System.out.println("Message Stored");
        }
        else
        {
            System.err.println("Message not stored");
        }
        setMsgStatus = 1; 
        refresh(panelchat);
        scrollToBottom(jScrollPane1);
    }
}
