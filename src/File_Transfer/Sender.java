/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package File_Transfer;

import Client.ChatClient;
import Client.MessagePane;
import Client.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.*;
import java.net.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author amanpal
 */

class WindowEventHandler extends WindowAdapter {
    private final ChatClient client;
    private final String cmd;
    public WindowEventHandler(ChatClient client, String cmd)
    {
        this.client = client;
        this.cmd = cmd;
    }
    public void windowClosing(WindowEvent evt) {
        try {
            if(cmd.equalsIgnoreCase("exit"))
            {
                client.close();
            }
            else
            {
                client.disconnect();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
  }
}

public class Sender extends javax.swing.JFrame {

    private final String sendTo;
    private final ChatClient client;
    private final MessagePane mPane;
    private double fileSize = 0;
    private JFileChooser jfc;
    private boolean readyToSend = false;
    final String sizeArray[] = {"B","KB","MB","GB","TB"};
    String serverAddress="",tempAddress="";
    /**
     * Creates new form Sender
     */
    void retrieveServerIP(boolean flag) // flag is false when it is executed for first time, else label is updated
    {
        try
        {
            tempAddress = InetAddress.getLocalHost().toString().substring(InetAddress.getLocalHost().toString().lastIndexOf("/")+1);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,"Unable to Retrieve System IP, Restart the Application and Retry","Runtime Error !",0); // EIWQ
            System.exit(0);
        }
        if(!(tempAddress.equals(serverAddress)))
        {
            serverAddress=tempAddress;
            if(flag)
                SwingUtilities.invokeLater(new Runnable()
                {
                    public void run()
                    {
                        address.setText("Type this in client app : "+serverAddress+" ");
                    }
                });
        }
    }
    public Sender(MessagePane mpane, ChatClient client, String to) {
        this.mPane = mpane;
        this.sendTo = to;
        this.client = client;
        initComponents();
        jfc = new JFileChooser();
        
        // disconnect before exit
        this.addWindowListener(new WindowEventHandler(client, "disconnect"));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
        
        new Thread(new Runnable()
        {
            public void run()
            {
                while(true)
                {
                    retrieveServerIP(true);
                }
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        sizeField = new javax.swing.JLabel();
        typeField = new javax.swing.JLabel();
        browser = new javax.swing.JButton();
        send = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        address = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel1.setText("File Name");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel2.setText("File Size");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel3.setText("File Type");

        nameField.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        sizeField.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        sizeField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));

        typeField.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        typeField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));

        browser.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        browser.setText("Browse");
        browser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browserMouseClicked(evt);
            }
        });

        send.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        send.setText("Send");
        send.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMouseClicked(evt);
            }
        });

        status.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("STATUS");

        address.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        address.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        address.setText("IP:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                                .addGap(60, 60, 60)
                                .addComponent(browser, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(557, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addComponent(browser, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(sizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(typeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73)
                .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void openFile(File path)
    {
        File f = path;
        int counter = 0;
        fileSize = f.length(); // in bytes
        
        if(fileSize == 0L)
        {
            JOptionPane.showMessageDialog(null,"No Valid file found on specified location","File not found",0);
            return;
        }
        String filename = f.toString().substring(f.toString().lastIndexOf("\\")+1, f.toString().length());
        mPane.FileName = filename;
        String extension = f.toString().substring(f.toString().lastIndexOf(".")+1, f.toString().length()).toUpperCase();
        long tempSize = (long)fileSize;
        while(tempSize>1000)
        {
            counter++;
            tempSize/=1024;
        }
         if(extension.equals("JAVA") || extension.equals("C")|| extension.equals("CPP")|| extension.equals("CS")|| extension.equals("CSS")|| extension.equals("HTML")|| extension.equals("JS")|| extension.equals("PHP")|| extension.equals("XML")|| extension.equals("VB"))
            extension+=" Source File";
        else if (extension.equals("JPG") || extension.equals("BMP")|| extension.equals("PNG")|| extension.equals("GIF")|| extension.equals("TIFF") || extension.equals("ICO"))
            extension+=" File (Image/Icon)";
        else if (extension.equals("MPG") || extension.equals("MPEG")|| extension.equals("MP4")|| extension.equals("AVI")|| extension.equals("3GP")|| extension.equals("RMVB")|| extension.equals("WMV")|| extension.equals("MKV")|| extension.equals("VOB")|| extension.equals("MOV") || extension.equals("FLV"))
            extension+=" File (Video)";
        else if (extension.equals("MP3") || extension.equals("WMA")|| extension.equals("FLAC")|| extension.equals("AAC")|| extension.equals("AMF")|| extension.equals("AMR")|| extension.equals("M4A")|| extension.equals("M4R")|| extension.equals("OGG")|| extension.equals("MP2")|| extension.equals("WAV"))
            extension+=" File (Audio)";
        else if (extension.equals("EXE") ||extension.equals("CMD") ||extension.equals("BAT") || extension.equals("DMG") ||extension.equals("MSI"))
            extension+=" File (Executable File/Script)";
        else
            extension+=" Document/File";
         
        nameField.setText(f.toString());
        sizeField.setText(tempSize +" "+sizeArray[counter]);
        typeField.setText(extension);
        readyToSend = true;
         
    }
    
    private void browserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browserMouseClicked
        // TODO add your handling code here:
        
        int ret = jfc.showOpenDialog(rootPane);
            if(ret==JFileChooser.APPROVE_OPTION)
                openFile(jfc.getSelectedFile());
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Not Working!");
            }
            jPanel1.requestFocusInWindow();
    }//GEN-LAST:event_browserMouseClicked

    private void sendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMouseClicked
        // TODO add your handling code here:
        if(readyToSend)
                new Thread(new Runnable()
                {
                    public void run()
                    {
                        startServer();
                    }
                }).start();
            else
                JOptionPane.showMessageDialog(null,"Select a Valid file first ( size > 0B )","Error",0);
    }//GEN-LAST:event_sendMouseClicked

    private void startServer()
    {
        send.setEnabled(false);
        browser.setEnabled(false);
        status.setText("Waiting for Client to Connect");

        double startTime,endTime;
        // time variables;

        byte b[] = new byte[100000];
        // array to retrieve data from server and send to client

        double done=0;
        // done is used to count the percentage

        int read=0;
        // read counts the bytes read (within 4 bytes integer range) in WHILE loop

        String data;
        String fileName = nameField.getText().substring(nameField.getText().lastIndexOf('\\')+1);
        // data is the data to be sent via BR, stores (filename + length)
        // fileName stores the name of the file

        // constructing streams
        BufferedReader br=null;
        // to read String and long data via Socket

        PrintWriter pw=null;
        // to write String and long data via Socket

        BufferedInputStream bis=null;
        //to write file contents (byte stream) via Socket

        BufferedOutputStream bos=null;
        //to read byte data via Socket

        FileInputStream fis=null;
        // to read actual file using byte stream

        ServerSocket ss=null;
        // this will open a socket on port 4000 on local system

        Socket s=null;
        // this will serve a local port for a client

        // now allocating memory to objects and starting main logic

        data = fileName+"/"+new Double(fileSize);
        try
        {
            ss = new ServerSocket(4000);
            try {
            client.file(this.sendTo, InetAddress.getLocalHost());
            } catch (IOException ex) {
                System.err.println("Error with receiver!");
                ex.printStackTrace();
            }
            s = ss.accept();
            br = new BufferedReader(new InputStreamReader(s.getInputStream()));
            pw = new PrintWriter(s.getOutputStream());
        }
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(null,ioe.toString(),"error",0);
            System.exit(0);
        }
        
        pw.println(data);
        pw.flush();
        try
        {
            status.setText("Begining File Transfer");
            if(!(br.readLine().equals("Recieved")))
            {
                JOptionPane.showMessageDialog(null,"Client not Ready or connection was closed","Retry",2);
                status.setText("Faliure");
                System.exit(0);
            }
            bis = new BufferedInputStream(s.getInputStream());
            bos = new BufferedOutputStream(s.getOutputStream());
            fis = new FileInputStream(nameField.getText());
            status.setText("Sending file to "+s);

            startTime=System.currentTimeMillis();
            while((read=fis.read(b))!=-1)
            {
                done+=read;
                ServerSwingWorker ssw = new ServerSwingWorker(done,fileSize,read,b,bos);
                ssw.execute();
                while(!(ssw.isDone())){}
            }
            bos.flush();
            endTime=System.currentTimeMillis();
            browser.setEnabled(true);
            send.setEnabled(true);
            nameField.setText("");
            sizeField.setText("");
            typeField.setText("");
            status.setText("Sent 100 %");
            double time=(endTime-startTime)/1000;
            double speed=(fileSize/time)/1048576;
            String speedString=String.valueOf(speed);
            speedString=((speedString.indexOf(".")+3)<speedString.length()?speedString.substring(0,speedString.indexOf(".")+3):speedString.substring(0));
            pw.println(time);
            pw.flush();
            pw.println(speedString);
            pw.flush();
            JOptionPane.showMessageDialog(null,"Time taken is "+time+"nSpeed is "+speedString+" MBPS","File Sent (Server)",3);
            //status.setText("Select File and Start Server");

            // reset for further operation
            status.setText("Select File and Start Server");
            bis.close();
            bos.close();
            fis.close();
            br.close();
            pw.close();
            ss.close();
            s.close();
            mPane.sent();
            this.dispose();
            this.setVisible(false);
        }
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(null,ioe.toString(),"Error",0);
            System.exit(0);
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel address;
    private javax.swing.JButton browser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton send;
    private javax.swing.JLabel sizeField;
    private javax.swing.JLabel status;
    private javax.swing.JLabel typeField;
    // End of variables declaration//GEN-END:variables

}
    ///Sending data
    class ServerSwingWorker extends SwingWorker
    {
        final double done,size;
        byte b[] = new byte[100000];
        final int read;
        BufferedOutputStream bos;
        ServerSwingWorker(double done,double size,int read,byte b[],BufferedOutputStream bos)
        {
            this.done = done;
            this.size = size;
            this.read = read;
            this.b    = b;
            this.bos  = bos;
        }
        protected Void doInBackground() throws Exception
        {
            bos.write(b,0,read);
            return null;
        }

        protected void done()
        {
            final double temp=(done/size)*100;
            SwingUtilities.invokeLater(new Runnable()
            {
                public void run()
                {
                    String tString = new Double(temp).toString();
                    int index=tString.indexOf(".");
                    int breakPoint= (index+3)>tString.length()?tString.length():(index+3);
                    tString = new Double(temp).toString();
                    tString=tString.substring(0,breakPoint);
                }
            });
        }
    }
